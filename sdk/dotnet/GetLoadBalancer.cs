// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Digitalocean
{
    public static partial class Invokes
    {
        /// <summary>
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-digitalocean/blob/master/website/docs/d/loadbalancer.html.markdown.
        /// </summary>
        public static Task<GetLoadBalancerResult> GetLoadBalancer(GetLoadBalancerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetLoadBalancerResult>("digitalocean:index/getLoadBalancer:getLoadBalancer", args, options.WithVersion());
    }

    public sealed class GetLoadBalancerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of load balancer.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetLoadBalancerArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetLoadBalancerResult
    {
        public readonly string Algorithm;
        public readonly ImmutableArray<int> DropletIds;
        public readonly string DropletTag;
        public readonly bool EnableProxyProtocol;
        public readonly ImmutableArray<Outputs.GetLoadBalancerForwardingRulesResult> ForwardingRules;
        public readonly Outputs.GetLoadBalancerHealthcheckResult Healthcheck;
        public readonly string Ip;
        public readonly string Name;
        public readonly bool RedirectHttpToHttps;
        public readonly string Region;
        public readonly string Status;
        public readonly Outputs.GetLoadBalancerStickySessionsResult StickySessions;
        public readonly string Urn;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetLoadBalancerResult(
            string algorithm,
            ImmutableArray<int> dropletIds,
            string dropletTag,
            bool enableProxyProtocol,
            ImmutableArray<Outputs.GetLoadBalancerForwardingRulesResult> forwardingRules,
            Outputs.GetLoadBalancerHealthcheckResult healthcheck,
            string ip,
            string name,
            bool redirectHttpToHttps,
            string region,
            string status,
            Outputs.GetLoadBalancerStickySessionsResult stickySessions,
            string urn,
            string id)
        {
            Algorithm = algorithm;
            DropletIds = dropletIds;
            DropletTag = dropletTag;
            EnableProxyProtocol = enableProxyProtocol;
            ForwardingRules = forwardingRules;
            Healthcheck = healthcheck;
            Ip = ip;
            Name = name;
            RedirectHttpToHttps = redirectHttpToHttps;
            Region = region;
            Status = status;
            StickySessions = stickySessions;
            Urn = urn;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetLoadBalancerForwardingRulesResult
    {
        public readonly string CertificateId;
        public readonly int EntryPort;
        public readonly string EntryProtocol;
        public readonly int TargetPort;
        public readonly string TargetProtocol;
        public readonly bool TlsPassthrough;

        [OutputConstructor]
        private GetLoadBalancerForwardingRulesResult(
            string certificateId,
            int entryPort,
            string entryProtocol,
            int targetPort,
            string targetProtocol,
            bool tlsPassthrough)
        {
            CertificateId = certificateId;
            EntryPort = entryPort;
            EntryProtocol = entryProtocol;
            TargetPort = targetPort;
            TargetProtocol = targetProtocol;
            TlsPassthrough = tlsPassthrough;
        }
    }

    [OutputType]
    public sealed class GetLoadBalancerHealthcheckResult
    {
        public readonly int CheckIntervalSeconds;
        public readonly int HealthyThreshold;
        public readonly string Path;
        public readonly int Port;
        public readonly string Protocol;
        public readonly int ResponseTimeoutSeconds;
        public readonly int UnhealthyThreshold;

        [OutputConstructor]
        private GetLoadBalancerHealthcheckResult(
            int checkIntervalSeconds,
            int healthyThreshold,
            string path,
            int port,
            string protocol,
            int responseTimeoutSeconds,
            int unhealthyThreshold)
        {
            CheckIntervalSeconds = checkIntervalSeconds;
            HealthyThreshold = healthyThreshold;
            Path = path;
            Port = port;
            Protocol = protocol;
            ResponseTimeoutSeconds = responseTimeoutSeconds;
            UnhealthyThreshold = unhealthyThreshold;
        }
    }

    [OutputType]
    public sealed class GetLoadBalancerStickySessionsResult
    {
        public readonly string CookieName;
        public readonly int CookieTtlSeconds;
        public readonly string Type;

        [OutputConstructor]
        private GetLoadBalancerStickySessionsResult(
            string cookieName,
            int cookieTtlSeconds,
            string type)
        {
            CookieName = cookieName;
            CookieTtlSeconds = cookieTtlSeconds;
            Type = type;
        }
    }
    }
}
