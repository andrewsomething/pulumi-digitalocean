// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DigitalOcean database cluster resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-digitalocean/blob/master/website/docs/r/database_cluster.html.markdown.
type DatabaseCluster struct {
	s *pulumi.ResourceState
}

// NewDatabaseCluster registers a new resource with the given unique name, arguments, and options.
func NewDatabaseCluster(ctx *pulumi.Context,
	name string, args *DatabaseClusterArgs, opts ...pulumi.ResourceOpt) (*DatabaseCluster, error) {
	if args == nil || args.Engine == nil {
		return nil, errors.New("missing required argument 'Engine'")
	}
	if args == nil || args.NodeCount == nil {
		return nil, errors.New("missing required argument 'NodeCount'")
	}
	if args == nil || args.Region == nil {
		return nil, errors.New("missing required argument 'Region'")
	}
	if args == nil || args.Size == nil {
		return nil, errors.New("missing required argument 'Size'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["engine"] = nil
		inputs["evictionPolicy"] = nil
		inputs["maintenanceWindows"] = nil
		inputs["name"] = nil
		inputs["nodeCount"] = nil
		inputs["region"] = nil
		inputs["size"] = nil
		inputs["sqlMode"] = nil
		inputs["tags"] = nil
		inputs["version"] = nil
	} else {
		inputs["engine"] = args.Engine
		inputs["evictionPolicy"] = args.EvictionPolicy
		inputs["maintenanceWindows"] = args.MaintenanceWindows
		inputs["name"] = args.Name
		inputs["nodeCount"] = args.NodeCount
		inputs["region"] = args.Region
		inputs["size"] = args.Size
		inputs["sqlMode"] = args.SqlMode
		inputs["tags"] = args.Tags
		inputs["version"] = args.Version
	}
	inputs["database"] = nil
	inputs["host"] = nil
	inputs["password"] = nil
	inputs["port"] = nil
	inputs["privateHost"] = nil
	inputs["privateUri"] = nil
	inputs["uri"] = nil
	inputs["urn"] = nil
	inputs["user"] = nil
	s, err := ctx.RegisterResource("digitalocean:index/databaseCluster:DatabaseCluster", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DatabaseCluster{s: s}, nil
}

// GetDatabaseCluster gets an existing DatabaseCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseCluster(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DatabaseClusterState, opts ...pulumi.ResourceOpt) (*DatabaseCluster, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["database"] = state.Database
		inputs["engine"] = state.Engine
		inputs["evictionPolicy"] = state.EvictionPolicy
		inputs["host"] = state.Host
		inputs["maintenanceWindows"] = state.MaintenanceWindows
		inputs["name"] = state.Name
		inputs["nodeCount"] = state.NodeCount
		inputs["password"] = state.Password
		inputs["port"] = state.Port
		inputs["privateHost"] = state.PrivateHost
		inputs["privateUri"] = state.PrivateUri
		inputs["region"] = state.Region
		inputs["size"] = state.Size
		inputs["sqlMode"] = state.SqlMode
		inputs["tags"] = state.Tags
		inputs["uri"] = state.Uri
		inputs["urn"] = state.Urn
		inputs["user"] = state.User
		inputs["version"] = state.Version
	}
	s, err := ctx.ReadResource("digitalocean:index/databaseCluster:DatabaseCluster", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DatabaseCluster{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DatabaseCluster) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DatabaseCluster) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Name of the cluster's default database.
func (r *DatabaseCluster) Database() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["database"])
}

// Database engine used by the cluster (ex. `pg` for PostreSQL, `mysql` for MySQL, or `redis` for Redis).
func (r *DatabaseCluster) Engine() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["engine"])
}

// A string specifying the eviction policy for a Redis cluster. Valid values are: `noeviction`, `allkeysLru`, `allkeysRandom`, `volatileLru`, `volatileRandom`, or `volatileTtl`.
func (r *DatabaseCluster) EvictionPolicy() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["evictionPolicy"])
}

// Database cluster's hostname.
func (r *DatabaseCluster) Host() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["host"])
}

// Defines when the automatic maintenance should be performed for the database cluster.
func (r *DatabaseCluster) MaintenanceWindows() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["maintenanceWindows"])
}

// The name of the database cluster.
func (r *DatabaseCluster) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Number of nodes that will be included in the cluster.
func (r *DatabaseCluster) NodeCount() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["nodeCount"])
}

// Password for the cluster's default user.
func (r *DatabaseCluster) Password() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["password"])
}

// Network port that the database cluster is listening on.
func (r *DatabaseCluster) Port() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["port"])
}

// Same as `host`, but only accessible from resources within the account and in the same region.
func (r *DatabaseCluster) PrivateHost() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["privateHost"])
}

// Same as `uri`, but only accessible from resources within the account and in the same region.
func (r *DatabaseCluster) PrivateUri() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["privateUri"])
}

// DigitalOcean region where the cluster will reside.
func (r *DatabaseCluster) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

// Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`).
func (r *DatabaseCluster) Size() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["size"])
}

// A comma separated string specifying the  SQL modes for a MySQL cluster.
func (r *DatabaseCluster) SqlMode() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sqlMode"])
}

// A list of tag names to be applied to the database cluster.
func (r *DatabaseCluster) Tags() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tags"])
}

// The full URI for connecting to the database cluster.
func (r *DatabaseCluster) Uri() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["uri"])
}

// The uniform resource name of the database cluster.
func (r *DatabaseCluster) Urn() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["urn"])
}

// Username for the cluster's default user.
func (r *DatabaseCluster) User() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["user"])
}

// Engine version used by the cluster (ex. `11` for PostgreSQL 11).
func (r *DatabaseCluster) Version() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["version"])
}

// Input properties used for looking up and filtering DatabaseCluster resources.
type DatabaseClusterState struct {
	// Name of the cluster's default database.
	Database interface{}
	// Database engine used by the cluster (ex. `pg` for PostreSQL, `mysql` for MySQL, or `redis` for Redis).
	Engine interface{}
	// A string specifying the eviction policy for a Redis cluster. Valid values are: `noeviction`, `allkeysLru`, `allkeysRandom`, `volatileLru`, `volatileRandom`, or `volatileTtl`.
	EvictionPolicy interface{}
	// Database cluster's hostname.
	Host interface{}
	// Defines when the automatic maintenance should be performed for the database cluster.
	MaintenanceWindows interface{}
	// The name of the database cluster.
	Name interface{}
	// Number of nodes that will be included in the cluster.
	NodeCount interface{}
	// Password for the cluster's default user.
	Password interface{}
	// Network port that the database cluster is listening on.
	Port interface{}
	// Same as `host`, but only accessible from resources within the account and in the same region.
	PrivateHost interface{}
	// Same as `uri`, but only accessible from resources within the account and in the same region.
	PrivateUri interface{}
	// DigitalOcean region where the cluster will reside.
	Region interface{}
	// Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`).
	Size interface{}
	// A comma separated string specifying the  SQL modes for a MySQL cluster.
	SqlMode interface{}
	// A list of tag names to be applied to the database cluster.
	Tags interface{}
	// The full URI for connecting to the database cluster.
	Uri interface{}
	// The uniform resource name of the database cluster.
	Urn interface{}
	// Username for the cluster's default user.
	User interface{}
	// Engine version used by the cluster (ex. `11` for PostgreSQL 11).
	Version interface{}
}

// The set of arguments for constructing a DatabaseCluster resource.
type DatabaseClusterArgs struct {
	// Database engine used by the cluster (ex. `pg` for PostreSQL, `mysql` for MySQL, or `redis` for Redis).
	Engine interface{}
	// A string specifying the eviction policy for a Redis cluster. Valid values are: `noeviction`, `allkeysLru`, `allkeysRandom`, `volatileLru`, `volatileRandom`, or `volatileTtl`.
	EvictionPolicy interface{}
	// Defines when the automatic maintenance should be performed for the database cluster.
	MaintenanceWindows interface{}
	// The name of the database cluster.
	Name interface{}
	// Number of nodes that will be included in the cluster.
	NodeCount interface{}
	// DigitalOcean region where the cluster will reside.
	Region interface{}
	// Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`).
	Size interface{}
	// A comma separated string specifying the  SQL modes for a MySQL cluster.
	SqlMode interface{}
	// A list of tag names to be applied to the database cluster.
	Tags interface{}
	// Engine version used by the cluster (ex. `11` for PostgreSQL 11).
	Version interface{}
}
