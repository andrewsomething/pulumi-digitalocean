// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DigitalOcean database connection pool resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-digitalocean/blob/master/website/docs/r/database_connection_pool.html.markdown.
type DatabaseConnectionPool struct {
	s *pulumi.ResourceState
}

// NewDatabaseConnectionPool registers a new resource with the given unique name, arguments, and options.
func NewDatabaseConnectionPool(ctx *pulumi.Context,
	name string, args *DatabaseConnectionPoolArgs, opts ...pulumi.ResourceOpt) (*DatabaseConnectionPool, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	if args == nil || args.DbName == nil {
		return nil, errors.New("missing required argument 'DbName'")
	}
	if args == nil || args.Mode == nil {
		return nil, errors.New("missing required argument 'Mode'")
	}
	if args == nil || args.Size == nil {
		return nil, errors.New("missing required argument 'Size'")
	}
	if args == nil || args.User == nil {
		return nil, errors.New("missing required argument 'User'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["clusterId"] = nil
		inputs["dbName"] = nil
		inputs["mode"] = nil
		inputs["name"] = nil
		inputs["size"] = nil
		inputs["user"] = nil
	} else {
		inputs["clusterId"] = args.ClusterId
		inputs["dbName"] = args.DbName
		inputs["mode"] = args.Mode
		inputs["name"] = args.Name
		inputs["size"] = args.Size
		inputs["user"] = args.User
	}
	inputs["host"] = nil
	inputs["password"] = nil
	inputs["port"] = nil
	inputs["privateHost"] = nil
	inputs["privateUri"] = nil
	inputs["uri"] = nil
	s, err := ctx.RegisterResource("digitalocean:index/databaseConnectionPool:DatabaseConnectionPool", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DatabaseConnectionPool{s: s}, nil
}

// GetDatabaseConnectionPool gets an existing DatabaseConnectionPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseConnectionPool(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DatabaseConnectionPoolState, opts ...pulumi.ResourceOpt) (*DatabaseConnectionPool, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["clusterId"] = state.ClusterId
		inputs["dbName"] = state.DbName
		inputs["host"] = state.Host
		inputs["mode"] = state.Mode
		inputs["name"] = state.Name
		inputs["password"] = state.Password
		inputs["port"] = state.Port
		inputs["privateHost"] = state.PrivateHost
		inputs["privateUri"] = state.PrivateUri
		inputs["size"] = state.Size
		inputs["uri"] = state.Uri
		inputs["user"] = state.User
	}
	s, err := ctx.ReadResource("digitalocean:index/databaseConnectionPool:DatabaseConnectionPool", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DatabaseConnectionPool{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DatabaseConnectionPool) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DatabaseConnectionPool) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The ID of the source database cluster. Note: This must be a PostgreSQL cluster.
func (r *DatabaseConnectionPool) ClusterId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterId"])
}

// The database for use with the connection pool.
func (r *DatabaseConnectionPool) DbName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["dbName"])
}

// The hostname used to connect to the database connection pool.
func (r *DatabaseConnectionPool) Host() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["host"])
}

// The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
func (r *DatabaseConnectionPool) Mode() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["mode"])
}

// The name for the database connection pool.
func (r *DatabaseConnectionPool) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Password for the connection pool's user.
func (r *DatabaseConnectionPool) Password() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["password"])
}

// Network port that the database connection pool is listening on.
func (r *DatabaseConnectionPool) Port() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["port"])
}

// Same as `host`, but only accessible from resources within the account and in the same region.
func (r *DatabaseConnectionPool) PrivateHost() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["privateHost"])
}

// Same as `uri`, but only accessible from resources within the account and in the same region.
func (r *DatabaseConnectionPool) PrivateUri() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["privateUri"])
}

// The desired size of the PGBouncer connection pool.
func (r *DatabaseConnectionPool) Size() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["size"])
}

// The full URI for connecting to the database connection pool.
func (r *DatabaseConnectionPool) Uri() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["uri"])
}

// The name of the database user for use with the connection pool.
func (r *DatabaseConnectionPool) User() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["user"])
}

// Input properties used for looking up and filtering DatabaseConnectionPool resources.
type DatabaseConnectionPoolState struct {
	// The ID of the source database cluster. Note: This must be a PostgreSQL cluster.
	ClusterId interface{}
	// The database for use with the connection pool.
	DbName interface{}
	// The hostname used to connect to the database connection pool.
	Host interface{}
	// The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
	Mode interface{}
	// The name for the database connection pool.
	Name interface{}
	// Password for the connection pool's user.
	Password interface{}
	// Network port that the database connection pool is listening on.
	Port interface{}
	// Same as `host`, but only accessible from resources within the account and in the same region.
	PrivateHost interface{}
	// Same as `uri`, but only accessible from resources within the account and in the same region.
	PrivateUri interface{}
	// The desired size of the PGBouncer connection pool.
	Size interface{}
	// The full URI for connecting to the database connection pool.
	Uri interface{}
	// The name of the database user for use with the connection pool.
	User interface{}
}

// The set of arguments for constructing a DatabaseConnectionPool resource.
type DatabaseConnectionPoolArgs struct {
	// The ID of the source database cluster. Note: This must be a PostgreSQL cluster.
	ClusterId interface{}
	// The database for use with the connection pool.
	DbName interface{}
	// The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
	Mode interface{}
	// The name for the database connection pool.
	Name interface{}
	// The desired size of the PGBouncer connection pool.
	Size interface{}
	// The name of the database user for use with the connection pool.
	User interface{}
}
