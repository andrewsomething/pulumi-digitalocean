// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DigitalOcean Kubernetes node pool resource. While the default node pool must be defined in the `.KubernetesCluster` resource, this resource can be used to add additional ones to a cluster.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-digitalocean/blob/master/website/docs/r/kubernetes_node_pool.html.markdown.
type KubernetesNodePool struct {
	s *pulumi.ResourceState
}

// NewKubernetesNodePool registers a new resource with the given unique name, arguments, and options.
func NewKubernetesNodePool(ctx *pulumi.Context,
	name string, args *KubernetesNodePoolArgs, opts ...pulumi.ResourceOpt) (*KubernetesNodePool, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	if args == nil || args.Size == nil {
		return nil, errors.New("missing required argument 'Size'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["autoScale"] = nil
		inputs["clusterId"] = nil
		inputs["maxNodes"] = nil
		inputs["minNodes"] = nil
		inputs["name"] = nil
		inputs["nodeCount"] = nil
		inputs["size"] = nil
		inputs["tags"] = nil
	} else {
		inputs["autoScale"] = args.AutoScale
		inputs["clusterId"] = args.ClusterId
		inputs["maxNodes"] = args.MaxNodes
		inputs["minNodes"] = args.MinNodes
		inputs["name"] = args.Name
		inputs["nodeCount"] = args.NodeCount
		inputs["size"] = args.Size
		inputs["tags"] = args.Tags
	}
	inputs["actualNodeCount"] = nil
	inputs["nodes"] = nil
	s, err := ctx.RegisterResource("digitalocean:index/kubernetesNodePool:KubernetesNodePool", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &KubernetesNodePool{s: s}, nil
}

// GetKubernetesNodePool gets an existing KubernetesNodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesNodePool(ctx *pulumi.Context,
	name string, id pulumi.ID, state *KubernetesNodePoolState, opts ...pulumi.ResourceOpt) (*KubernetesNodePool, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["actualNodeCount"] = state.ActualNodeCount
		inputs["autoScale"] = state.AutoScale
		inputs["clusterId"] = state.ClusterId
		inputs["maxNodes"] = state.MaxNodes
		inputs["minNodes"] = state.MinNodes
		inputs["name"] = state.Name
		inputs["nodeCount"] = state.NodeCount
		inputs["nodes"] = state.Nodes
		inputs["size"] = state.Size
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("digitalocean:index/kubernetesNodePool:KubernetesNodePool", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &KubernetesNodePool{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *KubernetesNodePool) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *KubernetesNodePool) ID() pulumi.IDOutput {
	return r.s.ID()
}

// A computed field representing the actual number of nodes in the node pool, which is especially useful when auto-scaling is enabled.
func (r *KubernetesNodePool) ActualNodeCount() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["actualNodeCount"])
}

// Enable auto-scaling of the number of nodes in the node pool within the given min/max range.
func (r *KubernetesNodePool) AutoScale() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["autoScale"])
}

// The ID of the Kubernetes cluster to which the node pool is associated.
func (r *KubernetesNodePool) ClusterId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterId"])
}

// If auto-scaling is enabled, this represents the maximum number of nodes that the node pool can be scaled up to.
func (r *KubernetesNodePool) MaxNodes() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxNodes"])
}

// If auto-scaling is enabled, this represents the minimum number of nodes that the node pool can be scaled down to.
func (r *KubernetesNodePool) MinNodes() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["minNodes"])
}

// A name for the node pool.
func (r *KubernetesNodePool) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The number of Droplet instances in the node pool. If auto-scaling is enabled, this should only be set if the desired result is to explicitly reset the number of nodes to this value. If auto-scaling is enabled, and the node count is outside of the given min/max range, it will use the min nodes value.
func (r *KubernetesNodePool) NodeCount() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["nodeCount"])
}

// A list of nodes in the pool. Each node exports the following attributes:
// - `id` -  A unique ID that can be used to identify and reference the node.
// - `name` - The auto-generated name for the node.
// - `status` -  A string indicating the current status of the individual node.
// - `createdAt` - The date and time when the node was created.
// - `updatedAt` - The date and time when the node was last updated.
func (r *KubernetesNodePool) Nodes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["nodes"])
}

// The slug identifier for the type of Droplet to be used as workers in the node pool.
func (r *KubernetesNodePool) Size() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["size"])
}

// A list of tag names to be applied to the Kubernetes cluster.
func (r *KubernetesNodePool) Tags() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering KubernetesNodePool resources.
type KubernetesNodePoolState struct {
	// A computed field representing the actual number of nodes in the node pool, which is especially useful when auto-scaling is enabled.
	ActualNodeCount interface{}
	// Enable auto-scaling of the number of nodes in the node pool within the given min/max range.
	AutoScale interface{}
	// The ID of the Kubernetes cluster to which the node pool is associated.
	ClusterId interface{}
	// If auto-scaling is enabled, this represents the maximum number of nodes that the node pool can be scaled up to.
	MaxNodes interface{}
	// If auto-scaling is enabled, this represents the minimum number of nodes that the node pool can be scaled down to.
	MinNodes interface{}
	// A name for the node pool.
	Name interface{}
	// The number of Droplet instances in the node pool. If auto-scaling is enabled, this should only be set if the desired result is to explicitly reset the number of nodes to this value. If auto-scaling is enabled, and the node count is outside of the given min/max range, it will use the min nodes value.
	NodeCount interface{}
	// A list of nodes in the pool. Each node exports the following attributes:
	// - `id` -  A unique ID that can be used to identify and reference the node.
	// - `name` - The auto-generated name for the node.
	// - `status` -  A string indicating the current status of the individual node.
	// - `createdAt` - The date and time when the node was created.
	// - `updatedAt` - The date and time when the node was last updated.
	Nodes interface{}
	// The slug identifier for the type of Droplet to be used as workers in the node pool.
	Size interface{}
	// A list of tag names to be applied to the Kubernetes cluster.
	Tags interface{}
}

// The set of arguments for constructing a KubernetesNodePool resource.
type KubernetesNodePoolArgs struct {
	// Enable auto-scaling of the number of nodes in the node pool within the given min/max range.
	AutoScale interface{}
	// The ID of the Kubernetes cluster to which the node pool is associated.
	ClusterId interface{}
	// If auto-scaling is enabled, this represents the maximum number of nodes that the node pool can be scaled up to.
	MaxNodes interface{}
	// If auto-scaling is enabled, this represents the minimum number of nodes that the node pool can be scaled down to.
	MinNodes interface{}
	// A name for the node pool.
	Name interface{}
	// The number of Droplet instances in the node pool. If auto-scaling is enabled, this should only be set if the desired result is to explicitly reset the number of nodes to this value. If auto-scaling is enabled, and the node count is outside of the given min/max range, it will use the min nodes value.
	NodeCount interface{}
	// The slug identifier for the type of Droplet to be used as workers in the node pool.
	Size interface{}
	// A list of tag names to be applied to the Kubernetes cluster.
	Tags interface{}
}
